1. When you create a website, it's standard practice to code your HTML files before writing any CSS and to write up one HTML file before moving onto the next. Write your HTML semantically, too:
* If something is a heading, you use a heading tag.
* If something is a list, you use an unordered or ordered list tag.
* So on and so forth.
1. The content for the index.html should be unique to you.
* Write a paragraph or two about yourself. Make it fun, show your personality!
* The main logo where it says "Your Name" should say your name. This may make the logo section smaller or wider depending on how long your name is—that is fine and expected.
* Add, commit, and push your code to GitHub often, especially when you complete a page.
1. After all of your HTML is written, you can begin styling your pages using the style.css file you created.
* Be sure to validate your html.
* Consult the specs below these instructions for advice on styling your CSS files.
1. Push your changes to Github.

Additional Specifcations
1. Colors Pro-tip: Use the Eye Dropper Chrome extension to find the colors used on web pages.
    * Teal color (used for headings and backgrounds): #4aaaa5
    * Regular font color (used for paragraphs and all text besides the headings): #777777
    * Main header background color: #ffffff
    * Main header border color: #cccccc
    * Footer background color: #666666
    * Main content background color: #ffffff
    * Main content border color: #dddddd
2. Fonts:
    * For heading fonts use font-family: 'Georgia', Times, Times New Roman, serif;.
    * For all other fonts use 'Arial', 'Helvetica Neue', Helvetica, sans-serif;.
3. Profile Image Found on index.html:
    * Use a picture of yourself.
    * If you don't have a picture, you can grab a placeholder image from LoremPixel. Save the images to your images folder.
4. Portfolio Images:
    * Placeholder images can be found at LoremPixel.
    * Save the images to your images folder.
5. Social Link Images (Github, LinkedIn, StackOverflow, etc.):
    * These images can be found on IconFinder.
    * Save the images to your images folder.
    * Ensure that these icons are live links to your GitHub, LinkedIn, and Stack Overflow profiles.
6. Background Images:
    * The background pattern used was found on Subtle Patterns. You can browse through that site and find whichever pattern you like.
7. Dimensions:
    * The entire content area is 960px wide.
    * The main section content is 650px wide.
    * The sidebar is 270px wide.
    * Pro-tip: Use the Page Ruler extension to measure the size of elements.




Assignment One Instructions - (No Bootstrap)
1. Inside your Responsive-Portfolio folder, find your styles.css file. You will write your media queries at the bottom of styles.css. 
2. Use three @media screen tags, each with one of these max-widths: 980px, 768px and 640px. 
* You use 980px because you never want any of the content to be cut off. Since the desktop layout is about 960px wide, you want the media queries to kick in before your content gets cut off. 
* 768px is about the width of a tablet and 640px is about the width of a phone in landscape. 
1. Make the layout match the following screenshots: 
2. index.html: 980px, 768px, 640px 
3. portfolio.html: 980px, 768px, 640px 
4. contact.html: 980px, 768px, 640px 
5. Make the position of the header static (the default positioning) when the screen is 640px wide. The header design takes up a lot of room; you don't want it to stick to the top of a small screen and leave no room for the rest of your site. 
6. Be sure to include the viewport tag in all your HTML files, otherwise your media-queries won't function as expected on mobile devices. (Hint: You won't need to use exact pixels for anything other than the container) 
7. Protip: Use the Chrome extensions Window Resizer and Browser Width to see the browser dimensions in Chrome. 
8. Deploy your new portfolio (now with media queries!) to GitHub Pages. 



Assignment Two Instructions (Bootstrap)
1. Inside your Bootstrap-Portfolio repo, create index.html, portfolio.html and contact.html. 
2. Using Bootstrap, recreate your portfolio site with the following items: 
* A navbar 
* A responsive layout (remember the grid, rows and columns are your friends)
    * eg. On xs and sm screens, each section should take up the entire grid. On m and larger screens, each section should take up 2/3 of the grid and the sidebar should take up 1/3 of the grid
* Responsive images 
BONUS Using Bootstrap, make a sticky footer and use sub-rows and sub-solumns on your portfolio site (Hint: Check out the Bootstrap documentation)
1. Your Bootstrap solution should minimize use of media queries. 

